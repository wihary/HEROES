@using System.Diagnostics
@using System.IO
@using Newtonsoft.Json
@using AlmaIt.Dotnet.Heroes.Client.ViewModel.Enumeration
@using AlmaIt.Dotnet.Heroes.Client.Components
@using AlmaIt.Dotnet.Heroes.Shared.Enumeration
@using AlmaIt.Dotnet.Heroes.Shared.Models
@using AlmaIt.Dotnet.Heroes.Shared.Business
@using AlmaIt.Dotnet.Heroes.Client.Converters
@inject HttpClient Http

@using AlmaIt.Dotnet.Heroes.Client.Helpers
@using AlmaIt.Dotnet.Heroes.Shared.Models
@inherits ComicsBrowserBase

@if (string.IsNullOrEmpty(this.Statistics))
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="float-left">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="Filter">
                    <button class="btn btn-sm" onclick="@ApplySearchFilter">
                        <i class="oi oi-magnifying-glass"></i>
                    </button>
                </span>
            </div>
            <input type="text" class="form-control" aria-describedby="Filter" placeholder="search" bind="@(this.Filter)"/>
        </div>
    </div>
    <button type="button" class="btn btn-primary float-right w-25 mb-3" data-toggle="button" aria-pressed="false" autocomplete="off" onclick="@(async () => await this.ToggleOverride())">
        @(this.OverrideToggleMessage)
    </button>

    <table class="table table-striped table-sm table-hover">
        <thead>
        <tr class="row m-0">
            <th scope="col" class="col-2">Tags</th>
            <th scope="col" class="col-3">
                <button class="btn btn-link" onclick="@(async () => await this.SortSeriesBySerieName())">@(HtmlHelper.DisplayName<ComicBook>(cs => cs.ComicSerie.Name))</button>
            </th>
            <th scope="col" class="col-3">
                <button class="btn btn-link" onclick="@(async () => await this.SortSeriesByTitle())">@(HtmlHelper.DisplayName<ComicBook>(cs => cs.Title))</button>
            </th>
            <th scope="col" class="col-1">
                <button class="btn btn-link" onclick="@(async () => await this.SortSeriesByIssueNumber())">@(HtmlHelper.DisplayName<ComicBook>(cs => cs.IssueNumber))</button>
            </th>
            <th scope="col" class="col-3"></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var comicBook in this.ViewableComicBooks)
        {
            <tr class="row m-0">
 					<td class="col-2"> 
                        @if(comicBook.Tags != null)
                        {
                            foreach (var comicBookTags in comicBook.Tags)
                            {
                                <span class="badge badge-primary" style="background-color: @comicBookTags.Color.ToHtml()">@comicBookTags.Name</span>
                            }
                        }
                        
                    </td>
                <td class="col-3">
                    @if (comicBook.ComicSerie == null)
                    {
                        <span> - </span>
                    }
                    else
                    {
                        <span><a href="/overview/serie/@comicBook.ComicSerie.Id">@comicBook.ComicSerie.Name</a></span>
                    }
                </td>
                <td class="col-3">@comicBook.Title</td>
                <td class="col-1">@comicBook.IssueNumber</td>
                <td class="col-3">
                    <button class="btn btn-default" onclick="@(() => this.EditComicBook(comicBook.Id))">Edit</button> |
                    <button class="btn btn-default" onclick="@(async () => await this.DeleteComicBook(comicBook.Id))">Delete</button>
                </td>
            </tr>
            if (this.EditionStatus.Key == comicBook.Id && this.EditionStatus.Value)
            {
                <tr>
                    <td colspan="4" class="px-5 py-3">
                        <EditComic EditedComicBook="@comicBook" EditCompleted="@OnEditionCompleted"/>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>

    <ul class="pagination float-left">
        <li class="page-item @(this.CurrentPage > 1 ? "enabled" : "disabled")">
            <a class="page-link" onclick=@(async () => await this.ShowPage(1)) aria-label="Previous" aria-disabled=@(this.CurrentPage > 1 ? "false" : "true")>
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        <li class="page-item @(this.CurrentPage > 1 ? "enabled" : "disabled")">
            <a class="page-link" onclick=@(async () => await this.ShowPage(this.CurrentPage - 1)) tabindex="-1" aria-disabled=@(this.CurrentPage > 1 ? " false" : "true")>
                Previous
            </a>
        </li>
        @{
            var i = this.PagerMin;
            while (i <= this.PagerMax)
            {
                var pageButtonNumber = i;
                <li class="page-item @(pageButtonNumber == this.CurrentPage ? "active" : "")">
                    <a class="page-link" name="page-@pageButtonNumber" onclick=@(async () => await this.ShowPage(pageButtonNumber))>
                        @pageButtonNumber
                    </a>
                </li>
                i++;
            }
        }
        <li class="page-item @(this.CurrentPage < this.TotalPages ? "enabled" : "disabled")">
            <a class="page-link" onclick=@(async () => await this.ShowPage(this.CurrentPage + 1)) tabindex="-1" aria-disabled=@(this.CurrentPage < this.TotalPages ? "false" : "true")>
                Next
            </a>
        </li>
        <li class="page-item @(this.CurrentPage < this.TotalPages ? "enabled" : "disabled")">
            <a class="page-link" onclick=@(async () => await this.ShowPage(this.TotalPages)) aria-label="Next" aria-disabled=@(this.CurrentPage < this.TotalPages ? "false" : "true")>
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
    <span class="float-right btn btn-link disabled">Nb Comics : @(this.TotalResult)</span>
    <span class="float-right btn btn-link disabled">@(this.Statistics)</span>
}
