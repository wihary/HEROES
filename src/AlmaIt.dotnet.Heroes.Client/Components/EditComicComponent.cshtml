@using AlmaIt.dotnet.Heroes.Shared.Models
@using AlmaIt.dotnet.Heroes.Shared.Enumeration
@inject HttpClient Http


<div class="alert alert-secondary" role="alert">
    <h4>Edit Comic Book details</h4>
    <div class="form-row">
        <div class="col-4">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="EditTitle">Title</span>
                </div>
                <input type="text" class="form-control" aria-describedby="EditTitle" bind="@EditedComicBook.Title" />
            </div>
        </div>
        <div class="col-1">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="EditIssue">Issue</span>
                </div>
                <input type="text" class="form-control" aria-describedby="EditIssue" bind="@EditedComicBook.IssueNumber" />
            </div>
        </div>
        <div class="col-auto">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="EditParution">Parution</span>
                </div>
                <input type="date" class="form-control" aria-describedby="EditParution" bind="@EditedComicBook.ParutionDate" format-value="yyyy-MM-dd" />
            </div>
        </div>
    </div>
    <div class="form-row">
        <div class="col-auto">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="EditSerie">Related to</span>
                </div>
                <select class="form-control" aria-describedby="EditSerie" bind="@this.selectedComicSerie">
                <option value="0">-- Select related Serie --</option>
                    @foreach (var comicSerie in comicSerieList)
                    {
                        <option value="@comicSerie.Id">@comicSerie.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>
    <div class="form-row">
        <div class="col-auto">
            <div class="form-group">
                <label for="EditBookStatusOption">Where does this Comic Book belong ?</label><br/>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="EditBookStatusOption" id="EditOptionCollection" checked="@(this.selectedBookStatus == ComicBookStatus.Collection)" onchange="@(() => this.selectedBookStatus = ComicBookStatus.Collection)" />
                    <label class="form-check-label" for="EditOptionCollection">Collection</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="EditBookStatusOption" id="EditOptionWishlist" checked="@(this.selectedBookStatus == ComicBookStatus.Wishlist)" onchange="@(() => this.selectedBookStatus = ComicBookStatus.Wishlist)" />
                    <label class="form-check-label" for="EditOptionWishlist">Wishlist</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="EditBookStatusOption" id="EditOptionNone" checked="@(this.selectedBookStatus == ComicBookStatus.None)" onchange="@(() => this.selectedBookStatus = ComicBookStatus.None)" />
                    <label class="form-check-label" for="EditOptionNone">Neither</label>
                </div>
            </div>
        </div>
    </div>
    <div class="form-row">
        <div class="col-auto">
            <button class="btn btn-default" onclick="@(async () => await EditionCompleted(false))">Cancel</button>
        </div>
        <div class="col-auto">
            <button class="btn btn-default" onclick="@(async () => await UpdateComicBook())">Save</button>
        </div>
    </div>
</div>

@functions {
    [Parameter]
    Func<bool, Task> EditCompleted { get; set; }
    [Parameter]
    ComicBook EditedComicBook { get; set; }

    List<ComicSeries> comicSerieList = new List<ComicSeries>();
    int selectedComicSerie = 0;
    ComicBookStatus selectedBookStatus = ComicBookStatus.None;


    protected override async Task OnInitAsync()
    {
        comicSerieList = await Http.GetJsonAsync<List<ComicSeries>>("api/ComicSerie");
        if(this.EditedComicBook.ComicSerieId.HasValue)
            this.selectedComicSerie = this.EditedComicBook.ComicSerieId.Value;
        this.selectedBookStatus = this.EditedComicBook.Status;
    }

    protected async Task EditionCompleted(bool success)
    {
        await this.EditCompleted(success);
    }

    protected async Task UpdateComicBook()
    {
        this.EditedComicBook.ComicSerieId = this.selectedComicSerie;
        this.EditedComicBook.Status = this.selectedBookStatus;

        await Http.SendJsonAsync(HttpMethod.Put, "/api/ComicBook", this.EditedComicBook);
        await this.EditionCompleted(true);
    }
}